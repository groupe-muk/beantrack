<?php

namespace App\Http\Controllers;

use App\Models\Order;
use Illuminate\Http\Request as LaravelRequest;
use App\Models\OrderTracking;
use App\Models\Supplier;
use App\Models\Wholesaler;
use App\Models\RawCoffee;
use App\Models\CoffeeProduct;
use App\Models\Inventory;
use App\Models\InventoryUpdate;
use App\Models\Warehouse;
use App\Models\SupplyCenter;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;

class OrderController extends Controller
{
    /**
     * Display the order management dashboard
     */
    public function index()
    {
        // Get orders placed to suppliers (with supplier_id set)
        $ordersPlaced = Order::with(['supplier', 'rawCoffee', 'orderTrackings'])
            ->whereNotNull('supplier_id')
            ->latest()
            ->paginate(10);

        // Get orders received from wholesalers (with wholesaler_id set)
        $ordersReceived = Order::with(['wholesaler', 'coffeeProduct', 'orderTrackings'])
            ->whereNotNull('wholesaler_id')
            ->latest()
            ->paginate(10);

        $statuses = $this->getStatuses();

        return view('orders.index', compact('ordersPlaced', 'ordersReceived', 'statuses'));
    }

    /**
     * Show the form for creating a new order
     */
    public function create()
    {
        $suppliers = Supplier::pluck('name', 'id');
        $wholesalers = Wholesaler::pluck('name', 'id');
        $grades = RawCoffee::distinct()->pluck('grade');
        $coffeeTypes = RawCoffee::distinct()->pluck('coffee_type');
        $rawCoffees = RawCoffee::get();
        $coffeeProducts = CoffeeProduct::pluck('name', 'id');

        return view('orders.create', compact('suppliers', 'wholesalers', 'grades', 'coffeeTypes', 'rawCoffees', 'coffeeProducts'));
    }

    /**
     * Store a newly created order in storage.
     */
    public function store(LaravelRequest $request)
    {
        // Log the start of order creation
        \Log::info('Order creation started', [
            'user_id' => Auth::id(),
            'user_role' => Auth::user()->role ?? 'not authenticated',
            'request_data' => $request->all()
        ]);

        try {
            $validated = $request->validate([
                'supplier_id' => 'required|exists:supplier,id',
                'grade' => 'required|string',
                'coffee_type' => 'required|string',
                'order_date' => 'required|date',
                'total_amount' => 'required|integer|min:0',
                'quantity' => 'required|numeric|min:1', // Add quantity validation
                'notes' => 'nullable|string|max:500',
            ]);

            \Log::info('Validation passed', ['validated' => $validated]);

            // Find the raw coffee that matches both grade and coffee_type
            $rawCoffee = RawCoffee::where('grade', $validated['grade'])
                ->where('coffee_type', $validated['coffee_type'])
                ->first();

            \Log::info('Raw coffee search', [
                'grade' => $validated['grade'],
                'coffee_type' => $validated['coffee_type'],
                'raw_coffee_found' => $rawCoffee ? $rawCoffee->id : null
            ]);

            if (!$rawCoffee) {
                \Log::warning('No raw coffee found');
                return redirect()->back()
                    ->withInput()
                    ->withErrors(['grade' => 'No raw coffee found matching the selected grade and coffee type.']);
            }

            \Log::info('About to create order');

            $order = Order::create([
                'supplier_id' => $validated['supplier_id'],
                'raw_coffee_id' => $rawCoffee->id,
                'order_date' => $validated['order_date'],
                'total_amount' => $validated['total_amount'],
                'quantity' => $validated['quantity'], // Use the actual quantity from form
                'total_price' => $validated['total_amount'], // Map total_amount to total_price
                'status' => 'pending', // Default status
                'notes' => $validated['notes'] ?? null
            ]);

            // Since the ID is generated by a database trigger and not returned by Laravel,
            // we need to fetch the most recently created order to get the proper ID
            $order = Order::where('supplier_id', $validated['supplier_id'])
                ->where('raw_coffee_id', $rawCoffee->id)
                ->where('order_date', $validated['order_date'])
                ->latest('created_at')
                ->first();

            \Log::info('Order created successfully', ['order_id' => $order->id]);

            // Create an initial tracking record only for shipped orders
            // Since this is a new order with 'pending' status, we'll skip tracking for now
            // Tracking can be added later when the order status changes to 'shipped'

            // Log the successful order creation
            \Log::info('Admin order created successfully', [
                'order_id' => $order->id,
                'redirecting_to' => route('orders.index'),
                'redirect_url' => url('orders')
            ]);

            // Test the redirect route exists
            try {
                $redirectUrl = route('orders.index');
                \Log::info('Redirect URL generated successfully', ['url' => $redirectUrl]);
            } catch (\Exception $e) {
                \Log::error('Error generating redirect URL', ['error' => $e->getMessage()]);
            }

            return redirect()->route('orders.index')->with('success', 'Order created successfully!');

        } catch (\Illuminate\Validation\ValidationException $e) {
            \Log::error('Validation failed', ['errors' => $e->errors()]);
            throw $e;
        } catch (\Exception $e) {
            \Log::error('Order creation failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return redirect()->back()
                ->withInput()
                ->withErrors(['error' => 'An error occurred while creating the order. Please try again.']);
        }
    }

    /**
     * Display the specified order
     */
    public function show(Order $order)
    {
        $order->load(['supplier', 'wholesaler', 'rawCoffee', 'coffeeProduct.rawCoffee', 'orderTrackings']);
        return view('orders.show', compact('order'));
    }

    /**
     * Show the form for editing the specified order.
     */
    public function edit(Order $order)
    {
        return view('orders.edit', compact('order'));
    }

    /**
     * Update the specified order in storage.
     */
    public function update(LaravelRequest $request, Order $order)
    {
        $validated = $request->validate([
            'order_date' => 'required|date',
            'total_amount' => 'required|integer|min:0',
            'quantity' => 'required|numeric|min:1',
            'status' => ['required', Rule::in(['pending', 'confirmed', 'shipped', 'delivered'])],
            'notes' => 'nullable|string|max:500',
        ]);

        // Check if status is changing
        $statusChanged = $order->status !== $validated['status'];
        $oldStatus = $order->status;

        // Update the order
        $order->update($validated);

        // If status changed, create tracking record
        if ($statusChanged) {
            $trackableStatuses = ['shipped', 'in-transit', 'delivered'];
            if (in_array($validated['status'], $trackableStatuses)) {
                // Map order status to tracking status
                $trackingStatus = $validated['status']; // 'shipped' and 'delivered' are the same
                if ($validated['status'] === 'confirmed') {
                    $trackingStatus = 'shipped'; // Map confirmed to shipped for tracking
                }
                
                // Create a new tracking record
                $order->orderTrackings()->create([
                    'status' => $trackingStatus,
                    'location' => Auth::check() ? ('Updated by ' . Auth::user()->name) : 'System Update',
                    'notes' => 'Status updated from ' . $oldStatus . ' to ' . $validated['status']
                ]);
            }
        }

        return redirect()->route('orders.edit', $order)->with('success', 'Order updated successfully.');
    }

    /**
     * Update the order status
     */
    public function updateStatus(LaravelRequest $request, Order $order)
    {
        $validated = $request->validate([
            'status' => ['required', Rule::in(['pending', 'confirmed', 'shipped', 'delivered', 'rejected', 'cancelled'])], // Match database enum
            'notes' => 'nullable|string|max:500',
        ]);

        $user = Auth::user();
        $newStatus = $validated['status'];
        $oldStatus = $order->status;

        // Authorization checks
        if ($user->isSupplier()) {
            // Suppliers should use dedicated supplier routes, not this generic one
            $supplier = $user->supplier;
            if (!$supplier || $order->supplier_id !== $supplier->id) {
                return redirect()->back()->with('error', 'You are not authorized to modify this order. Please use the supplier-specific order management.');
            }
        } elseif ($user->isVendor()) {
            // Vendors can only modify their own orders
            $wholesaler = $user->wholesaler;
            if (!$wholesaler || $order->wholesaler_id !== $wholesaler->id) {
                return redirect()->back()->with('error', 'You are not authorized to modify this order.');
            }
        } elseif (!$user->isAdmin()) {
            // Only admins, suppliers, and vendors can modify orders
            return redirect()->back()->with('error', 'You are not authorized to modify orders.');
        }

        try {
            DB::beginTransaction();

            // Handle inventory logic for status changes
            if ($newStatus === 'confirmed' && $oldStatus === 'pending') {
                // Check if order has required fields for inventory checking
                if ($order->raw_coffee_id && $order->quantity) {
                    // Check inventory availability for raw coffee orders
                    $availableStock = Inventory::getAvailableStock($order->raw_coffee_id);
                    if ($availableStock < $order->quantity) {
                        $shortfall = $order->quantity - $availableStock;
                        return redirect()->back()->with('error', 
                            "Insufficient inventory to fulfill this order. Available stock: {$availableStock} kg, Required: {$order->quantity} kg. Shortfall: {$shortfall} kg.");
                    }

                    // Reduce inventory stock
                    $reductions = Inventory::reduceStock(
                        $order->raw_coffee_id, 
                        $order->quantity,
                        $order->id,
                        $user->id
                    );

                    Log::info('Inventory reduced for order confirmation', [
                        'order_id' => $order->id,
                        'raw_coffee_id' => $order->raw_coffee_id,
                        'quantity_reduced' => $order->quantity,
                        'reductions' => $reductions
                    ]);
                }
            }

            // Handle vendor inventory increase when order is delivered/received
            if ($newStatus === 'delivered' && in_array($oldStatus, ['shipped', 'confirmed'])) {
                if ($order->coffee_product_id && $order->quantity && $order->wholesaler) {
                    $this->updateVendorInventory($order, $order->wholesaler);
                    Log::info('Vendor inventory updated for delivered order', [
                        'order_id' => $order->id,
                        'coffee_product_id' => $order->coffee_product_id,
                        'quantity_added' => $order->quantity
                    ]);
                }
            }

            // Handle admin inventory increase when admin marks order as delivered/received
            if ($newStatus === 'delivered' && in_array($oldStatus, ['shipped', 'confirmed']) && $user->isAdmin()) {
                // Check if this is an order from a supplier (raw coffee) or processed product
                if (($order->raw_coffee_id && $order->quantity) || ($order->coffee_product_id && $order->quantity)) {
                    $this->updateAdminInventory($order);
                    Log::info('Admin inventory updated for delivered order', [
                        'order_id' => $order->id,
                        'raw_coffee_id' => $order->raw_coffee_id,
                        'coffee_product_id' => $order->coffee_product_id,
                        'quantity_added' => $order->quantity
                    ]);
                }
            }

            // Only create tracking records for trackable statuses
            $trackableStatuses = ['shipped', 'in-transit', 'delivered'];
            if (in_array($newStatus, $trackableStatuses)) {
                // Map order status to tracking status
                $trackingStatus = $newStatus; // 'shipped' and 'delivered' are the same
                if ($newStatus === 'confirmed') {
                    $trackingStatus = 'shipped'; // Map confirmed to shipped for tracking
                }
                
                // Create a new tracking record
                $trackingNotes = $validated['notes'] ?? null;
                if (!$trackingNotes) {
                    if ($newStatus === 'confirmed') {
                        $trackingNotes = 'Order confirmed - Inventory updated';
                    } elseif ($newStatus === 'shipped' && $order->wholesaler_id) {
                        $trackingNotes = 'Order marked as in transit by admin';
                    } elseif ($newStatus === 'shipped') {
                        $trackingNotes = 'Order shipped';
                    }
                }
                
                $order->orderTrackings()->create([
                    'status' => $trackingStatus,
                    'location' => $user ? ('Updated by ' . $user->name) : 'System Update',
                    'notes' => $trackingNotes
                ]);
            }

            // Update the order status
            $order->update(['status' => $newStatus]);

            DB::commit();

            // Determine success message based on status change
            $message = 'Order status updated successfully';
            if ($newStatus === 'confirmed' && $oldStatus === 'pending') {
                $message = 'Order confirmed successfully. Inventory has been updated.';
            } elseif ($newStatus === 'shipped' && $oldStatus === 'confirmed') {
                if ($order->wholesaler_id) {
                    $message = 'Vendor order marked as in transit successfully.';
                } else {
                    $message = 'Order marked as shipped successfully.';
                }
            } elseif ($newStatus === 'delivered') {
                if ($user->isAdmin()) {
                    $message = 'Order marked as delivered successfully. Admin inventory has been updated.';
                } else {
                    $message = 'Order marked as delivered successfully. Vendor inventory has been updated.';
                }
            }

            return redirect()->back()->with('success', $message);

        } catch (\Exception $e) {
            DB::rollback();
            Log::error('Error updating order status', [
                'order_id' => $order->id,
                'old_status' => $oldStatus,
                'new_status' => $newStatus,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->back()->with('error', 'Failed to update order status. Please try again.');
        }
    }

    /**
     * Remove the specified order from storage.
     */
    public function destroy(Order $order)
    {
        $order->delete();
        return redirect()->route('orders.index')->with('success', 'Order deleted successfully.');
    }

    /**
     * Get order statistics for the dashboard
     */
    public function getOrderStats()
    {
        $stats = [
            'total_orders' => Order::count(),
            'pending_orders' => Order::where('status', 'pending')->count(),
            'processing_orders' => Order::where('status', 'processing')->count(),
            'shipped_orders' => Order::where('status', 'shipped')->count(),
            'delivered_orders' => Order::where('status', 'delivered')->count(),
            'cancelled_orders' => Order::where('status', 'cancelled')->count(),
            'recent_orders' => Order::with(['supplier', 'wholesaler'])
                ->latest()
                ->take(5)
                ->get()
        ];

        return response()->json($stats);
    }

    /**
     * Display the vendor order management dashboard
     */
    public function vendorIndex()
    {
        Log::info('VendorIndex method called');
        
        $user = Auth::user();
        $wholesaler = $user->wholesaler;
        
        if (!$wholesaler) {
            Log::error('Wholesaler not found in vendorIndex');
            return redirect()->route('dashboard')->with('error', 'Vendor profile not found.');
        }

        // Get orders placed by this vendor/wholesaler
        $orders = Order::with(['coffeeProduct', 'orderTrackings'])
            ->where('wholesaler_id', $wholesaler->id)
            ->latest()
            ->paginate(15);

        $statuses = $this->getStatuses();
        $orderStats = $this->getVendorOrderStats($wholesaler->id);

        Log::info('VendorIndex returning view', ['orders_count' => $orders->count()]);
        
        return view('vendor.orders.index', compact('orders', 'statuses', 'orderStats'));
    }

    /**
     * Show the form for creating a new vendor order
     */
    public function vendorCreate()
    {
        $user = Auth::user();
        $wholesaler = $user->wholesaler;
        
        if (!$wholesaler) {
            return redirect()->route('dashboard')->with('error', 'Vendor profile not found.');
        }

        $coffeeProducts = CoffeeProduct::with('rawCoffee')->get();
        
        return view('vendor.orders.create', compact('coffeeProducts'));
    }

    /**
     * Store a newly created vendor order
     */
    public function vendorStore(LaravelRequest $request)
    {
        try {
            // Add debugging at the start
            \Log::info('OrderController::vendorStore called', [
                'user' => Auth::user(),
                'request_data' => $request->all(),
                'method' => $request->method(),
                'url' => $request->url()
            ]);
            
            // Debug logging
            Log::info('VendorStore method called', [
                'user' => Auth::user(),
                'request_data' => $request->all()
            ]);
            
            Log::info('VendorStore - Getting user and wholesaler');
            $user = Auth::user();
            $wholesaler = $user->wholesaler;
            
            if (!$wholesaler) {
                Log::error('Wholesaler not found for user', ['user_id' => $user->id]);
                return redirect()->route('dashboard')->with('error', 'Vendor profile not found.');
            }
            
            Log::info('VendorStore - Wholesaler found', ['wholesaler_id' => $wholesaler->id]);

            Log::info('VendorStore - Starting validation');
            $validated = $request->validate([
                'coffee_product_id' => 'required|exists:coffee_product,id',
                'quantity' => 'required|numeric|min:1',
                'notes' => 'nullable|string|max:500',
            ]);
            
            Log::info('VendorStore - Validation passed', $validated);

            Log::info('VendorStore - Finding coffee product');
            $coffeeProduct = CoffeeProduct::findOrFail($validated['coffee_product_id']);
            Log::info('VendorStore - Coffee product found', ['product_id' => $coffeeProduct->id]);
            
            Log::info('VendorStore - Calculating price');
            $totalPrice = $coffeeProduct->calculatePrice($validated['quantity']);
            Log::info('VendorStore - Price calculated', ['total_price' => $totalPrice]);

            Log::info('VendorStore - Creating order');
            $order = Order::create([
                'wholesaler_id' => $wholesaler->id,
                'coffee_product_id' => $validated['coffee_product_id'],
                'quantity' => $validated['quantity'],
                'total_price' => $totalPrice,
                'total_amount' => $totalPrice,
                'status' => 'pending',
                'order_date' => now(),
                'notes' => $validated['notes'] ?? null
            ]);
            
            Log::info('VendorStore - Order created successfully');
            // Skip refresh since it's causing issues - the DB trigger handles the ID
            // $order->refresh();

            // Get the latest order for this wholesaler to get the ID
            $latestOrder = Order::where('wholesaler_id', $wholesaler->id)
                ->latest('created_at')
                ->first();

            $orderId = $latestOrder ? $latestOrder->id : 'Unknown';
            Log::info('Order created successfully', ['order_id' => $orderId]);

            Log::info('VendorStore - Redirecting to vendor orders index');
            // Redirect to vendor orders list instead of back
            return redirect()->route('orders.vendor.index')->with('success', 'Order placed successfully! Order ID: ' . $orderId);
            
        } catch (\Exception $e) {
            Log::error('VendorStore - Exception caught', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return redirect()->back()->with('error', 'Error creating order: ' . $e->getMessage());
        }
    }

    /**
     * Display the specified vendor order
     */
    public function vendorShow(Order $order)
    {
        $user = Auth::user();
        $wholesaler = $user->wholesaler;
        
        if (!$wholesaler || $order->wholesaler_id !== $wholesaler->id) {
            return redirect()->route('orders.vendor.index')->with('error', 'Order not found.');
        }

        $order->load(['coffeeProduct.rawCoffee', 'orderTrackings']);
        $statuses = $this->getStatuses();
        return view('vendor.orders.show', compact('order', 'statuses'));
    }

    /**
     * Cancel a vendor order (only if status is pending)
     */
    public function vendorCancel(Order $order)
    {
        $user = Auth::user();
        $wholesaler = $user->wholesaler;
        
        if (!$wholesaler || $order->wholesaler_id !== $wholesaler->id) {
            return redirect()->route('orders.vendor.index')->with('error', 'Order not found.');
        }

        if ($order->status !== 'pending') {
            return redirect()->route('orders.vendor.index')->with('error', 'Only pending orders can be cancelled.');
        }

        $order->update(['status' => 'cancelled']);

        return redirect()->route('orders.vendor.index')->with('success', 'Order cancelled successfully.');
    }

    /**
     * Mark a vendor order as received (only if status is shipped)
     */
    public function vendorMarkReceived(Order $order)
    {
        $user = Auth::user();
        $wholesaler = $user->wholesaler;
        
        if (!$wholesaler || $order->wholesaler_id !== $wholesaler->id) {
            return redirect()->route('orders.vendor.index')->with('error', 'Order not found.');
        }

        if ($order->status !== 'shipped') {
            return redirect()->route('orders.vendor.show', $order)->with('error', 'Only shipped orders can be marked as received.');
        }

        try {
            DB::beginTransaction();

            // Update order status
            $order->update(['status' => 'delivered']);

            // Add tracking record
            $order->orderTrackings()->create([
                'status' => 'delivered',
                'notes' => 'Order marked as received by vendor',
                'location' => 'Vendor Location',
                'updated_at' => now()
            ]);

            // Update vendor inventory
            $this->updateVendorInventory($order, $wholesaler);

            DB::commit();

            return redirect()->route('orders.vendor.show', $order)->with('success', 'Order marked as delivered successfully and inventory updated.');
            
        } catch (\Exception $e) {
            DB::rollback();
            Log::error('Error marking order as received', [
                'order_id' => $order->id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->route('orders.vendor.show', $order)->with('error', 'Failed to mark order as received. Please try again.');
        }
    }

    /**
     * Update vendor inventory when order is received
     */
    private function updateVendorInventory(Order $order, Wholesaler $wholesaler)
    {
        try {
            Log::info('Starting inventory update', [
                'order_id' => $order->id,
                'wholesaler_id' => $wholesaler->id,
                'coffee_product_id' => $order->coffee_product_id,
                'quantity' => $order->quantity
            ]);

            // Get or create the first warehouse for this wholesaler
            $warehouse = $wholesaler->warehouses()->first();
            
            if (!$warehouse) {
                Log::info('Creating new warehouse for wholesaler', ['wholesaler_id' => $wholesaler->id]);
                
                // Create a default warehouse if none exists
                $warehouse = $wholesaler->warehouses()->create([
                    'name' => $wholesaler->name . ' - Main Warehouse',
                    'location' => $wholesaler->address ?? 'Main Location',
                    'capacity' => 10000, // Default capacity
                    'wholesaler_id' => $wholesaler->id,
                    'manager_name' => $wholesaler->contact_person ?? 'Warehouse Manager'
                ]);
                
                Log::info('Warehouse created successfully', ['warehouse_id' => $warehouse->id]);
            }

            // Find existing inventory or create new one
            $inventory = Inventory::where('coffee_product_id', $order->coffee_product_id)
                                 ->where('warehouse_id', $warehouse->id)
                                 ->first();

            if ($inventory) {
                Log::info('Updating existing inventory', ['inventory_id' => $inventory->id]);
                
                // Update existing inventory
                $oldQuantity = $inventory->quantity_in_stock;
                $newQuantity = $oldQuantity + $order->quantity;
                
                $inventory->update([
                    'quantity_in_stock' => $newQuantity,
                    'last_updated' => now()
                ]);
                
                $updateType = 'stock_increase';
                $notes = "Received order #{$order->id} - Added {$order->quantity} kg";
                
                Log::info('Inventory updated successfully', [
                    'inventory_id' => $inventory->id,
                    'old_quantity' => $oldQuantity,
                    'new_quantity' => $newQuantity
                ]);
            } else {
                Log::info('Creating new inventory record');
                
                // Get the coffee product to use its category
                $coffeeProduct = \App\Models\CoffeeProduct::find($order->coffee_product_id);
                if (!$coffeeProduct) {
                    throw new \Exception("Coffee product not found: {$order->coffee_product_id}");
                }
                
                $category = strtolower($coffeeProduct->category);
                // Ensure category is valid for the ENUM
                if (!in_array($category, ['premium', 'standard', 'specialty'])) {
                    $category = 'standard'; // Default fallback
                }
                
                // Create new inventory record
                $inventory = Inventory::create([
                    'coffee_product_id' => $order->coffee_product_id,
                    'category' => $category,
                    'quantity_in_stock' => $order->quantity,
                    'warehouse_id' => $warehouse->id,
                    'last_updated' => now()
                ]);
                
                // Check if the ID was properly generated by the trigger
                if (!$inventory->id) {
                    // Manually generate ID if trigger failed
                    $lastInventory = Inventory::orderBy('id', 'desc')->first();
                    $nextId = 1;
                    if ($lastInventory && $lastInventory->id) {
                        $lastNumber = (int) substr($lastInventory->id, 1);
                        $nextId = $lastNumber + 1;
                    }
                    $newId = 'I' . str_pad($nextId, 5, '0', STR_PAD_LEFT);
                    $inventory->id = $newId;
                    $inventory->save();
                }
                
                // Refresh the inventory to ensure we have the latest data
                $inventory = $inventory->fresh();
                
                $oldQuantity = 0;
                $newQuantity = $order->quantity;
                $updateType = 'new_stock';
                $notes = "Initial stock from order #{$order->id} - Added {$order->quantity} kg";
                
                Log::info('New inventory created successfully', [
                    'inventory_id' => $inventory->id ?? 'NULL',
                    'inventory_object' => $inventory ? 'exists' : 'null'
                ]);
            }

            // Create inventory update record for tracking
            Log::info('Creating inventory update record', [
                'inventory_id' => $inventory->id ?? 'NULL',
                'order_id' => $order->id
            ]);
            
            if (!$inventory || !$inventory->id) {
                throw new \Exception("Inventory record is null or has no ID. Cannot create inventory update record.");
            }
            
            $inventoryUpdate = InventoryUpdate::create([
                'inventory_id' => $inventory->id,
                'quantity_change' => $order->quantity,
                'reason' => $notes,
                'updated_by' => Auth::user()->id
            ]);
            
            Log::info('Inventory update completed successfully', [
                'inventory_update_id' => $inventoryUpdate->id ?? 'unknown',
                'inventory_id' => $inventory->id
            ]);

        } catch (\Exception $e) {
            Log::error('Error in updateVendorInventory', [
                'order_id' => $order->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e; // Re-throw to be caught by the main transaction
        }
    }

    /**
     * Update admin supply center inventory when an order is marked as delivered/received
     */
    private function updateAdminInventory(Order $order)
    {
        try {
            Log::info('Starting admin inventory update', [
                'order_id' => $order->id,
                'raw_coffee_id' => $order->raw_coffee_id,
                'coffee_product_id' => $order->coffee_product_id,
                'quantity' => $order->quantity
            ]);

            // Get the first available supply center (or you could make this configurable)
            $supplyCenter = \App\Models\SupplyCenter::first();
            
            if (!$supplyCenter) {
                Log::info('Creating default supply center for admin inventory');
                
                // Create a default supply center if none exists
                $supplyCenter = \App\Models\SupplyCenter::create([
                    'id' => 'SC001',
                    'name' => 'Main Supply Center',
                    'location' => 'Main Location',
                    'capacity' => 50000, // Default capacity
                    'manager' => 'Supply Center Manager'
                ]);
                
                Log::info('Supply center created successfully', ['supply_center_id' => $supplyCenter->id]);
            }

            $inventory = null;
            $productType = null;
            $productId = null;

            // Determine if this is raw coffee or processed coffee product
            if ($order->raw_coffee_id && $order->quantity) {
                // Handle raw coffee inventory
                $productType = 'raw_coffee';
                $productId = $order->raw_coffee_id;
                
                $inventory = Inventory::where('raw_coffee_id', $order->raw_coffee_id)
                                     ->where('supply_center_id', $supplyCenter->id)
                                     ->first();
            } elseif ($order->coffee_product_id && $order->quantity) {
                // Handle processed coffee product inventory
                $productType = 'coffee_product';
                $productId = $order->coffee_product_id;
                
                $inventory = Inventory::where('coffee_product_id', $order->coffee_product_id)
                                     ->where('supply_center_id', $supplyCenter->id)
                                     ->first();
            }

            if (!$productId) {
                throw new \Exception("No valid product found in order {$order->id}");
            }

            if ($inventory) {
                Log::info('Updating existing admin inventory', ['inventory_id' => $inventory->id]);
                
                // Update existing inventory
                $oldQuantity = $inventory->quantity_in_stock;
                $newQuantity = $oldQuantity + $order->quantity;
                
                $inventory->update([
                    'quantity_in_stock' => $newQuantity,
                    'last_updated' => now()
                ]);
                
                $notes = "Received order #{$order->id} - Added {$order->quantity} kg";
                
                Log::info('Admin inventory updated successfully', [
                    'inventory_id' => $inventory->id,
                    'old_quantity' => $oldQuantity,
                    'new_quantity' => $newQuantity
                ]);
            } else {
                Log::info('Creating new admin inventory record');
                
                $inventoryData = [
                    'quantity_in_stock' => $order->quantity,
                    'supply_center_id' => $supplyCenter->id,
                    'last_updated' => now()
                ];

                if ($productType === 'raw_coffee') {
                    $inventoryData['raw_coffee_id'] = $order->raw_coffee_id;
                    
                    // Get the raw coffee to determine category if needed
                    $rawCoffee = \App\Models\RawCoffee::find($order->raw_coffee_id);
                    if ($rawCoffee && isset($rawCoffee->grade)) {
                        // Map grade to category (adjust as needed based on your business logic)
                        $category = strtolower($rawCoffee->grade);
                        if (!in_array($category, ['premium', 'standard', 'specialty'])) {
                            $category = 'standard'; // Default fallback
                        }
                        $inventoryData['category'] = $category;
                    }
                } else {
                    $inventoryData['coffee_product_id'] = $order->coffee_product_id;
                    
                    // Get the coffee product to use its category
                    $coffeeProduct = \App\Models\CoffeeProduct::find($order->coffee_product_id);
                    if ($coffeeProduct) {
                        $category = strtolower($coffeeProduct->category);
                        if (!in_array($category, ['premium', 'standard', 'specialty'])) {
                            $category = 'standard'; // Default fallback
                        }
                        $inventoryData['category'] = $category;
                    }
                }
                
                // Create new inventory record
                $inventory = Inventory::create($inventoryData);
                
                $notes = "Initial admin stock from order #{$order->id} - Added {$order->quantity} kg";
                
                Log::info('New admin inventory created successfully', ['inventory_id' => $inventory->id]);
            }

            // Create inventory update record for tracking
            Log::info('Creating admin inventory update record');
            
            $inventoryUpdate = \App\Models\InventoryUpdate::create([
                'inventory_id' => $inventory->id,
                'quantity_change' => $order->quantity,
                'reason' => $notes,
                'updated_by' => \Auth::user()->id
            ]);
            
            Log::info('Admin inventory update completed successfully', [
                'inventory_update_id' => $inventoryUpdate->id ?? 'unknown'
            ]);

        } catch (\Exception $e) {
            Log::error('Error in updateAdminInventory', [
                'order_id' => $order->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e; // Re-throw to be caught by the main transaction
        }
    }

    /**
     * Get vendor order statistics
     */
    private function getVendorOrderStats($wholesalerId)
    {
        $baseQuery = Order::where('wholesaler_id', $wholesalerId);
        
        return [
            'total_orders' => (clone $baseQuery)->count(),
            'pending_orders' => (clone $baseQuery)->where('status', 'pending')->count(),
            'confirmed_orders' => (clone $baseQuery)->where('status', 'confirmed')->count(),
            'shipped_orders' => (clone $baseQuery)->where('status', 'shipped')->count(),
            'delivered_orders' => (clone $baseQuery)->where('status', 'delivered')->count(),
            'cancelled_orders' => (clone $baseQuery)->where('status', 'cancelled')->count(),
            'total_spent' => (clone $baseQuery)->whereIn('status', ['confirmed', 'shipped', 'delivered'])->sum('total_price'),
        ];
    }

    /**
     * API: Get vendor order status updates
     */
    public function getVendorOrderStatusUpdates(LaravelRequest $request)
    {
        try {
            $vendorId = Auth::id();
            $wholesaler = Auth::user()->wholesaler;
            
            if (!$wholesaler) {
                return response()->json([
                    'success' => false,
                    'message' => 'Wholesaler not found'
                ], 404);
            }
            
            // Get orders with their current statuses
            $orders = Order::where('wholesaler_id', $wholesaler->id)
                ->orderBy('created_at', 'desc')
                ->get(['id', 'status', 'total_price', 'created_at']);

            // Get updated statistics
            $ordersQuery = Order::where('wholesaler_id', $wholesaler->id);
            
            $stats = [
                'total_orders' => (clone $ordersQuery)->count(),
                'pending_orders' => (clone $ordersQuery)->where('status', 'pending')->count(),
                'total_spent' => (clone $ordersQuery)->sum('total_price'),
                'completed_orders' => (clone $ordersQuery)->whereIn('status', ['delivered'])->count()
            ];

            return response()->json([
                'success' => true,
                'data' => [
                    'orders' => $orders,
                    'stats' => $stats,
                    'statuses' => $this->getStatuses()
                ]
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Failed to fetch status updates: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Helper to get status keys for validation
     */
    private function getStatuses()
    {
        return [
            'pending' => 'bg-yellow-100 text-yellow-800',
            'confirmed' => 'bg-blue-100 text-blue-800',
            'shipped' => 'bg-purple-100 text-purple-800',
            'delivered' => 'bg-green-100 text-green-800',
            'cancelled' => 'bg-red-100 text-red-800',
        ];
    }

    // =======================
    // SUPPLIER ORDER METHODS
    // =======================

    /**
     * Display supplier orders (orders received from admin)
     */
    public function supplierIndex()
    {
        $user = Auth::user();
        $supplier = $user->supplier;
        
        if (!$supplier) {
            return redirect()->route('dashboard')->with('error', 'Supplier profile not found.');
        }

        Log::info('SupplierIndex method called');

        // Get orders where this supplier is the supplier
        $orders = Order::where('supplier_id', $supplier->id)
            ->with(['rawCoffee', 'orderTrackings'])
            ->orderBy('created_at', 'desc')
            ->get();

        $statuses = $this->getStatuses();
        $orderStats = $this->getSupplierOrderStats($supplier->id);

        Log::info('SupplierIndex returning view', ['orders_count' => $orders->count()]);
        
        return view('supplier.orders.index', compact('orders', 'statuses', 'orderStats'));
    }

    /**
     * Show individual supplier order details
     */
    public function supplierShow(Order $order)
    {
        $user = Auth::user();
        $supplier = $user->supplier;
        
        if (!$supplier || $order->supplier_id !== $supplier->id) {
            return redirect()->route('orders.supplier.index')->with('error', 'Order not found.');
        }

        $order->load(['rawCoffee', 'orderTrackings']);
        $statuses = $this->getStatuses();

        return view('supplier.orders.show', compact('order', 'statuses'));
    }

    /**
     * Accept a pending order (supplier accepts admin's order)
     */
    public function supplierAccept(Order $order)
    {
        $user = Auth::user();
        $supplier = $user->supplier;
        
        if (!$supplier || $order->supplier_id !== $supplier->id) {
            return redirect()->route('orders.supplier.index')->with('error', 'Order not found.');
        }

        if ($order->status !== 'pending') {
            return redirect()->route('orders.supplier.show', $order)->with('error', 'Only pending orders can be accepted.');
        }

        // Check if order has raw coffee and quantity
        if (!$order->raw_coffee_id || !$order->quantity) {
            return redirect()->route('orders.supplier.show', $order)->with('error', 'Order is missing coffee details or quantity.');
        }

        // Check inventory availability (only from supplier's warehouses)
        $availableStock = \App\Models\Inventory::getAvailableStockForSupplier($order->raw_coffee_id, $supplier->id);
        if (!$availableStock || $availableStock < $order->quantity) {
            $shortfall = $order->quantity - $availableStock;
            return redirect()->route('orders.supplier.show', $order)->with('error', 
                "Insufficient inventory to fulfill this order. Available stock: {$availableStock} kg, Required: {$order->quantity} kg. Shortfall: {$shortfall} kg.");
        }

        try {
            DB::beginTransaction();

            // Update order status
            $order->update(['status' => 'confirmed']);

            // Reduce inventory stock (only from supplier's warehouses)
            $reductions = \App\Models\Inventory::reduceStockForSupplier(
                $order->raw_coffee_id, 
                $order->quantity,
                $supplier->id,
                $order->id,
                $user->id
            );

            // Add tracking record
            $order->orderTrackings()->create([
                'status' => 'confirmed',
                'notes' => 'Order accepted by supplier. Inventory reduced by ' . $order->quantity . ' kg.',
                'location' => 'Supplier Location',
                'updated_at' => now()
            ]);

            DB::commit();

            // Log the successful inventory reduction
            Log::info('Order accepted and inventory reduced', [
                'order_id' => $order->id,
                'raw_coffee_id' => $order->raw_coffee_id,
                'quantity_reduced' => $order->quantity,
                'reductions' => $reductions
            ]);

            return redirect()->route('orders.supplier.show', $order)->with('success', 
                'Order accepted successfully. Inventory has been updated to reflect the committed stock.');
            
        } catch (\Exception $e) {
            DB::rollback();
            Log::error('Error accepting order', [
                'order_id' => $order->id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->route('orders.supplier.show', $order)->with('error', 'Failed to accept order. Please try again.');
        }
    }

    /**
     * Reject a pending order
     */
    public function supplierReject(Order $order)
    {
        $user = Auth::user();
        $supplier = $user->supplier;
        
        if (!$supplier || $order->supplier_id !== $supplier->id) {
            return redirect()->route('orders.supplier.index')->with('error', 'Order not found.');
        }

        if ($order->status !== 'pending') {
            return redirect()->route('orders.supplier.show', $order)->with('error', 'Only pending orders can be rejected.');
        }

        try {
            DB::beginTransaction();

            // Update order status
            $order->update(['status' => 'cancelled']);

            // Add tracking record
            $order->orderTrackings()->create([
                'status' => 'cancelled',
                'notes' => 'Order rejected by supplier',
                'location' => 'Supplier Location',
                'updated_at' => now()
            ]);

            DB::commit();

            return redirect()->route('orders.supplier.show', $order)->with('success', 'Order rejected successfully.');
            
        } catch (\Exception $e) {
            DB::rollback();
            Log::error('Error rejecting order', [
                'order_id' => $order->id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->route('orders.supplier.show', $order)->with('error', 'Failed to reject order. Please try again.');
        }
    }

    /**
     * Mark a confirmed order as shipped
     */
    public function supplierMarkShipped(Order $order)
    {
        $user = Auth::user();
        $supplier = $user->supplier;
        
        if (!$supplier || $order->supplier_id !== $supplier->id) {
            return redirect()->route('orders.supplier.index')->with('error', 'Order not found.');
        }

        if ($order->status !== 'confirmed') {
            return redirect()->route('orders.supplier.show', $order)->with('error', 'Only confirmed orders can be shipped.');
        }

        try {
            DB::beginTransaction();

            // Update order status
            $order->update(['status' => 'shipped']);

            // Add tracking record
            $order->orderTrackings()->create([
                'status' => 'shipped',
                'notes' => 'Order shipped by supplier',
                'location' => 'Supplier Location',
                'updated_at' => now()
            ]);

            DB::commit();

            return redirect()->route('orders.supplier.show', $order)->with('success', 'Order marked as shipped successfully.');
            
        } catch (\Exception $e) {
            DB::rollback();
            Log::error('Error marking order as shipped', [
                'order_id' => $order->id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->route('orders.supplier.show', $order)->with('error', 'Failed to mark order as shipped. Please try again.');
        }
    }

    /**
     * Get supplier order statistics
     */
    private function getSupplierOrderStats($supplierId)
    {
        $ordersQuery = Order::where('supplier_id', $supplierId);
        
        return [
            'total_orders' => (clone $ordersQuery)->count(),
            'pending_orders' => (clone $ordersQuery)->where('status', 'pending')->count(),
            'confirmed_orders' => (clone $ordersQuery)->where('status', 'confirmed')->count(),
            'shipped_orders' => (clone $ordersQuery)->where('status', 'shipped')->count(),
            'total_revenue' => (clone $ordersQuery)->sum('total_price'),
        ];
    }

    /**
     * Admin accept a vendor order
     */
    public function acceptVendorOrder(Order $order)
    {
        $user = Auth::user();
        
        // Ensure this is a vendor order (has wholesaler_id)
        if (!$order->wholesaler_id) {
            return redirect()->route('orders.show', $order)->with('error', 'This is not a vendor order.');
        }

        if ($order->status !== 'pending') {
            return redirect()->route('orders.show', $order)->with('error', 'Only pending orders can be accepted.');
        }

        try {
            DB::beginTransaction();

            // Check if there's sufficient inventory for vendor orders
            if ($order->coffee_product_id && $order->quantity) {
                $availableStock = Inventory::getAvailableStockByType('coffee_product', $order->coffee_product_id);
                
                if ($availableStock < $order->quantity) {
                    $shortfall = $order->quantity - $availableStock;
                    return redirect()->route('orders.show', $order)->with('error', 
                        "Insufficient inventory to fulfill this order. Available stock: {$availableStock} kg, Required: {$order->quantity} kg. Shortfall: {$shortfall} kg.");
                }
            }

            // Update order status
            $order->update(['status' => 'confirmed']);

            // Reduce inventory stock for vendor orders
            if ($order->coffee_product_id && $order->quantity) {
                $reductions = Inventory::reduceStockByType(
                    'coffee_product',
                    $order->coffee_product_id, 
                    $order->quantity,
                    $order->id,
                    $user->id
                );

                Log::info('Coffee product inventory reduced for vendor order confirmation', [
                    'order_id' => $order->id,
                    'coffee_product_id' => $order->coffee_product_id,
                    'quantity_reduced' => $order->quantity,
                    'reductions' => $reductions
                ]);
            }

            // Add tracking record
            $order->orderTrackings()->create([
                'status' => 'confirmed',
                'notes' => 'Order accepted by admin' . ($order->coffee_product_id ? '. Inventory reduced by ' . $order->quantity . ' kg.' : ''),
                'location' => 'Admin Office',
                'updated_at' => now()
            ]);

            DB::commit();

            return redirect()->route('orders.show', $order)->with('success', 'Vendor order accepted successfully.');
            
        } catch (\Exception $e) {
            DB::rollback();
            Log::error('Error accepting vendor order', [
                'order_id' => $order->id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->route('orders.show', $order)->with('error', 'Failed to accept order. Please try again.');
        }
    }

    /**
     * Admin reject a vendor order
     */
    public function rejectVendorOrder(Order $order)
    {
        // Ensure this is a vendor order (has wholesaler_id)
        if (!$order->wholesaler_id) {
            return redirect()->route('orders.show', $order)->with('error', 'This is not a vendor order.');
        }

        if ($order->status !== 'pending') {
            return redirect()->route('orders.show', $order)->with('error', 'Only pending orders can be rejected.');
        }

        try {
            DB::beginTransaction();

            // Update order status
            $order->update(['status' => 'cancelled']);

            // Add tracking record
            $order->orderTrackings()->create([
                'status' => 'cancelled',
                'notes' => 'Order rejected by admin',
                'location' => 'Admin Office',
                'updated_at' => now()
            ]);

            DB::commit();

            return redirect()->route('orders.show', $order)->with('success', 'Vendor order rejected successfully.');
            
        } catch (\Exception $e) {
            DB::rollback();
            Log::error('Error rejecting vendor order', [
                'order_id' => $order->id,
                'error' => $e->getMessage()
            ]);
            
            return redirect()->route('orders.show', $order)->with('error', 'Failed to reject order. Please try again.');
        }
    }

    /**
     * Check inventory availability for an order
     */
    public function checkInventory(Order $order)
    {
        if (!$order->raw_coffee_id || !$order->quantity) {
            return response()->json([
                'available' => false,
                'message' => 'Order is missing coffee details or quantity.',
                'available_stock' => 0,
                'required_quantity' => $order->quantity ?? 0
            ]);
        }

        // For admin users, check only supply center inventory
        $user = Auth::user();
        if ($user && $user->isAdmin()) {
            $availableStock = Inventory::getAdminAvailableStock($order->raw_coffee_id);
        } else {
            // For other users, check all available stock
            $availableStock = Inventory::getAvailableStock($order->raw_coffee_id);
        }
        
        $sufficient = $availableStock >= $order->quantity;

        return response()->json([
            'available' => $sufficient,
            'message' => $sufficient 
                ? 'Sufficient inventory available for this order.' 
                : "Insufficient inventory. Available: {$availableStock} kg, Required: {$order->quantity} kg, Shortfall: " . ($order->quantity - $availableStock) . " kg.",
            'available_stock' => $availableStock,
            'required_quantity' => $order->quantity,
            'shortfall' => $sufficient ? 0 : ($order->quantity - $availableStock)
        ]);
    }

    /**
     * Get orders with inventory status for dashboard
     */
    public function getOrdersWithInventoryStatus()
    {
        $pendingOrders = Order::where('status', 'pending')
            ->whereNotNull('raw_coffee_id')
            ->whereNotNull('quantity')
            ->with(['rawCoffee', 'supplier', 'wholesaler'])
            ->get();

        $ordersWithStatus = $pendingOrders->map(function($order) {
            $availableStock = Inventory::getAvailableStock($order->raw_coffee_id);
            $sufficient = $availableStock >= $order->quantity;
            
            return [
                'id' => $order->id,
                'supplier' => $order->supplier ? $order->supplier->name : 'N/A',
                'wholesaler' => $order->wholesaler ? $order->wholesaler->name : 'N/A',
                'raw_coffee' => $order->rawCoffee ? $order->rawCoffee->coffee_type : 'N/A',
                'quantity' => $order->quantity,
                'available_stock' => $availableStock,
                'can_fulfill' => $sufficient,
                'shortfall' => $sufficient ? 0 : ($order->quantity - $availableStock)
            ];
        });

        return response()->json($ordersWithStatus);
    }
}